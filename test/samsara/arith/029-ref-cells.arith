let c:<num> = ref 2 in
let d:<(num * num)> = ref (5, 2) in
let appl:(num * num)->num->(num * num) =
  fun (pair:(num * num)) : num->(num * num) =>
  fun (additive:num) : (num * num) =>
  ((fst <- pair) + additive, (snd <- pair) + additive  * 2)
in
d := appl <- !d <- 5;
!d
