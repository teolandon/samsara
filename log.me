test/samsara/arith/025-more-lists.arith:
(let listone:[num] = (2::(3::(4::[]:num))) in (let listtwo:[num] = (5::(6::(7::[]:num))) in (let zip:[num]->[num]->[num] = (fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) in ((zip <- listone) <- listtwo))))
(let listtwo:[num] = (5::(6::(7::[]:num))) in (let zip:[num]->[num]->[num] = (fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) in ((zip <- (2::(3::(4::[]:num)))) <- listtwo)))
(let zip:[num]->[num]->[num] = (fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) in ((zip <- (2::(3::(4::[]:num)))) <- (5::(6::(7::[]:num)))))
(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (2::(3::(4::[]:num)))) <- (5::(6::(7::[]:num))))
((fun (ltwo:[num]) : [num] => (if (empty <- (2::(3::(4::[]:num)))) then []:num else (if (empty <- ltwo) then []:num else ((hd <- (2::(3::(4::[]:num))))::((hd <- ltwo)::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (2::(3::(4::[]:num))))) <- (tl <- ltwo))))))) <- (5::(6::(7::[]:num))))
(if (empty <- (2::(3::(4::[]:num)))) then []:num else (if (empty <- (5::(6::(7::[]:num)))) then []:num else ((hd <- (2::(3::(4::[]:num))))::((hd <- (5::(6::(7::[]:num))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (2::(3::(4::[]:num))))) <- (tl <- (5::(6::(7::[]:num)))))))))
$evaluating to false
(if false then []:num else (if (empty <- (5::(6::(7::[]:num)))) then []:num else ((hd <- (2::(3::(4::[]:num))))::((hd <- (5::(6::(7::[]:num))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (2::(3::(4::[]:num))))) <- (tl <- (5::(6::(7::[]:num)))))))))
(if (empty <- (5::(6::(7::[]:num)))) then []:num else ((hd <- (2::(3::(4::[]:num))))::((hd <- (5::(6::(7::[]:num))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (2::(3::(4::[]:num))))) <- (tl <- (5::(6::(7::[]:num))))))))
$evaluating to false
(if false then []:num else ((hd <- (2::(3::(4::[]:num))))::((hd <- (5::(6::(7::[]:num))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (2::(3::(4::[]:num))))) <- (tl <- (5::(6::(7::[]:num))))))))
trying cons on (hd <- (2::(3::(4::[]:num))))
((hd <- (2::(3::(4::[]:num))))::((hd <- (5::(6::(7::[]:num))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (2::(3::(4::[]:num))))) <- (tl <- (5::(6::(7::[]:num)))))))
trying cons on 2
trying cons on (hd <- (5::(6::(7::[]:num))))
(2::((hd <- (5::(6::(7::[]:num))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (2::(3::(4::[]:num))))) <- (tl <- (5::(6::(7::[]:num)))))))
trying cons on 2
trying cons on 5
(2::(5::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (2::(3::(4::[]:num))))) <- (tl <- (5::(6::(7::[]:num)))))))
trying cons on 2
trying cons on 5
(2::(5::((fun (ltwo:[num]) : [num] => (if (empty <- (tl <- (2::(3::(4::[]:num))))) then []:num else (if (empty <- ltwo) then []:num else ((hd <- (tl <- (2::(3::(4::[]:num)))))::((hd <- ltwo)::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- ltwo))))))) <- (tl <- (5::(6::(7::[]:num)))))))
trying cons on 2
trying cons on 5
(2::(5::(if (empty <- (tl <- (2::(3::(4::[]:num))))) then []:num else (if (empty <- (tl <- (5::(6::(7::[]:num))))) then []:num else ((hd <- (tl <- (2::(3::(4::[]:num)))))::((hd <- (tl <- (5::(6::(7::[]:num)))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))
trying cons on 2
trying cons on 5
(2::(5::(if (empty <- (3::(4::[]:num))) then []:num else (if (empty <- (tl <- (5::(6::(7::[]:num))))) then []:num else ((hd <- (tl <- (2::(3::(4::[]:num)))))::((hd <- (tl <- (5::(6::(7::[]:num)))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))
trying cons on 2
trying cons on 5
$evaluating to false
(2::(5::(if false then []:num else (if (empty <- (tl <- (5::(6::(7::[]:num))))) then []:num else ((hd <- (tl <- (2::(3::(4::[]:num)))))::((hd <- (tl <- (5::(6::(7::[]:num)))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))
trying cons on 2
trying cons on 5
(2::(5::(if (empty <- (tl <- (5::(6::(7::[]:num))))) then []:num else ((hd <- (tl <- (2::(3::(4::[]:num)))))::((hd <- (tl <- (5::(6::(7::[]:num)))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))
trying cons on 2
trying cons on 5
(2::(5::(if (empty <- (6::(7::[]:num))) then []:num else ((hd <- (tl <- (2::(3::(4::[]:num)))))::((hd <- (tl <- (5::(6::(7::[]:num)))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))
trying cons on 2
trying cons on 5
$evaluating to false
(2::(5::(if false then []:num else ((hd <- (tl <- (2::(3::(4::[]:num)))))::((hd <- (tl <- (5::(6::(7::[]:num)))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))
trying cons on 2
trying cons on 5
trying cons on (hd <- (tl <- (2::(3::(4::[]:num)))))
(2::(5::((hd <- (tl <- (2::(3::(4::[]:num)))))::((hd <- (tl <- (5::(6::(7::[]:num)))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))
trying cons on 2
trying cons on 5
trying cons on (hd <- (3::(4::[]:num)))
(2::(5::((hd <- (3::(4::[]:num)))::((hd <- (tl <- (5::(6::(7::[]:num)))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on (hd <- (tl <- (5::(6::(7::[]:num)))))
(2::(5::(3::((hd <- (tl <- (5::(6::(7::[]:num)))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on (hd <- (6::(7::[]:num)))
(2::(5::(3::((hd <- (6::(7::[]:num)))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
(2::(5::(3::(6::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (2::(3::(4::[]:num)))))) <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
(2::(5::(3::(6::((fun (ltwo:[num]) : [num] => (if (empty <- (tl <- (tl <- (2::(3::(4::[]:num)))))) then []:num else (if (empty <- ltwo) then []:num else ((hd <- (tl <- (tl <- (2::(3::(4::[]:num))))))::((hd <- ltwo)::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- ltwo))))))) <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
(2::(5::(3::(6::(if (empty <- (tl <- (tl <- (2::(3::(4::[]:num)))))) then []:num else (if (empty <- (tl <- (tl <- (5::(6::(7::[]:num)))))) then []:num else ((hd <- (tl <- (tl <- (2::(3::(4::[]:num))))))::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
(2::(5::(3::(6::(if (empty <- (tl <- (3::(4::[]:num)))) then []:num else (if (empty <- (tl <- (tl <- (5::(6::(7::[]:num)))))) then []:num else ((hd <- (tl <- (tl <- (2::(3::(4::[]:num))))))::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
(2::(5::(3::(6::(if (empty <- (4::[]:num)) then []:num else (if (empty <- (tl <- (tl <- (5::(6::(7::[]:num)))))) then []:num else ((hd <- (tl <- (tl <- (2::(3::(4::[]:num))))))::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
$evaluating to false
(2::(5::(3::(6::(if false then []:num else (if (empty <- (tl <- (tl <- (5::(6::(7::[]:num)))))) then []:num else ((hd <- (tl <- (tl <- (2::(3::(4::[]:num))))))::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
(2::(5::(3::(6::(if (empty <- (tl <- (tl <- (5::(6::(7::[]:num)))))) then []:num else ((hd <- (tl <- (tl <- (2::(3::(4::[]:num))))))::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
(2::(5::(3::(6::(if (empty <- (tl <- (6::(7::[]:num)))) then []:num else ((hd <- (tl <- (tl <- (2::(3::(4::[]:num))))))::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
(2::(5::(3::(6::(if (empty <- (7::[]:num)) then []:num else ((hd <- (tl <- (tl <- (2::(3::(4::[]:num))))))::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
$evaluating to false
(2::(5::(3::(6::(if false then []:num else ((hd <- (tl <- (tl <- (2::(3::(4::[]:num))))))::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on (hd <- (tl <- (tl <- (2::(3::(4::[]:num))))))
(2::(5::(3::(6::((hd <- (tl <- (tl <- (2::(3::(4::[]:num))))))::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on (hd <- (tl <- (3::(4::[]:num))))
(2::(5::(3::(6::((hd <- (tl <- (3::(4::[]:num))))::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on (hd <- (4::[]:num))
(2::(5::(3::(6::((hd <- (4::[]:num))::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on 4
trying cons on (hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))
(2::(5::(3::(6::(4::((hd <- (tl <- (tl <- (5::(6::(7::[]:num))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on 4
trying cons on (hd <- (tl <- (6::(7::[]:num))))
(2::(5::(3::(6::(4::((hd <- (tl <- (6::(7::[]:num))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on 4
trying cons on (hd <- (7::[]:num))
(2::(5::(3::(6::(4::((hd <- (7::[]:num))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on 4
trying cons on 7
(2::(5::(3::(6::(4::(7::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on 4
trying cons on 7
(2::(5::(3::(6::(4::(7::((fun (ltwo:[num]) : [num] => (if (empty <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) then []:num else (if (empty <- ltwo) then []:num else ((hd <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))::((hd <- ltwo)::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))) <- (tl <- ltwo))))))) <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on 4
trying cons on 7
(2::(5::(3::(6::(4::(7::(if (empty <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num))))))) then []:num else (if (empty <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))) then []:num else ((hd <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))::((hd <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))) <- (tl <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on 4
trying cons on 7
(2::(5::(3::(6::(4::(7::(if (empty <- (tl <- (tl <- (3::(4::[]:num))))) then []:num else (if (empty <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))) then []:num else ((hd <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))::((hd <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))) <- (tl <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on 4
trying cons on 7
(2::(5::(3::(6::(4::(7::(if (empty <- (tl <- (4::[]:num))) then []:num else (if (empty <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))) then []:num else ((hd <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))::((hd <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))) <- (tl <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on 4
trying cons on 7
(2::(5::(3::(6::(4::(7::(if (empty <- []:num) then []:num else (if (empty <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))) then []:num else ((hd <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))::((hd <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))) <- (tl <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))))))))
trying cons on 2
trying cons on 5
trying cons on 3
trying cons on 6
trying cons on 4
trying cons on 7
(2::(5::(3::(6::(4::(7::(if true then []:num else (if (empty <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))) then []:num else ((hd <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))::((hd <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num)))))))::(((fix f (lone:[num]) : [num]->[num] => (fun (ltwo:[num]) : [num] => (if (empty <- lone) then []:num else (if (empty <- ltwo) then []:num else ((hd <- lone)::((hd <- ltwo)::((f <- (tl <- lone)) <- (tl <- ltwo)))))))) <- (tl <- (tl <- (tl <- (tl <- (2::(3::(4::[]:num)))))))) <- (tl <- (tl <- (tl <- (tl <- (5::(6::(7::[]:num))))))))))))))))))
(2::(5::(3::(6::(4::(7::[]:num))))))
