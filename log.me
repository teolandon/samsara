test/samsara/arith/017-3x+1.arith:
(let iseven = (fun x -> (< (% x 2) 1)) in (let func = (fix f depth -> (fun num -> (if (< num 2) then depth else (if (iseven <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) in (let var = 6 in ((func <- 0) <- var))))
(let func = (fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) in (let var = 6 in ((func <- 0) <- var)))
(let var = 6 in (((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) <- var))
(((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) <- 6)
((fun num -> (if (< num 2) then 0 else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (/ num 2))) else (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (+ (* 3 num) 1)))))) <- 6)
(if (< 6 2) then 0 else (if ((fun x -> (< (% x 2) 1)) <- 6) then (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (/ 6 2))) else (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (+ (* 3 6) 1)))))
(if false then 0 else (if ((fun x -> (< (% x 2) 1)) <- 6) then (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (/ 6 2))) else (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (+ (* 3 6) 1)))))
(if ((fun x -> (< (% x 2) 1)) <- 6) then (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (/ 6 2))) else (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (+ (* 3 6) 1))))
(if (< (% 6 2) 1) then (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (/ 6 2))) else (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (+ (* 3 6) 1))))
(if (< 0 1) then (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (/ 6 2))) else (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (+ (* 3 6) 1))))
(if true then (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (/ 6 2))) else (+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (+ (* 3 6) 1))))
(+ ((fix f depth -> (fun num -> (if (< num 2) then depth else (if ((fun x -> (< (% x 2) 1)) <- num) then (+ (f <- depth) (1 <- (/ num 2))) else (+ (f <- depth) (1 <- (+ (* 3 num) 1))))))) <- 0) (1 <- (/ 6 2)))
Invalid expression: LOL
